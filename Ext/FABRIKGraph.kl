/*

*/
require Math;
require Characters;


/*---------------------------------------------------------------------------------------
//
// bone 間の接続を表現する隣接リスト使ったグラフ...
// 普通に skeleton 継承した方がいいかもしれない
//
---------------------------------------------------------------------------------------*/
object FFBIKEdge {
    Index a;
    Index b;

    Vec3 referencePose;  // diff vector a to b
};

function FFBIKEdge( in Index _a, in Index _b ){
    this.a = _a;
    this.b = _b;
}

function String FFBIKEdge.getName(){
    return "FFBIKEdge:" + this.a + "to" + this.b;
}



/*---------------------------------------------------------------------------------------
//
//
//
//
---------------------------------------------------------------------------------------*/
object FFBIKGraph {
    private Skeleton skeleton;
    private Index nodes[Index][];
    private Index controlledNodes[];
    private FFBIKEdge edges[];
    private Index root;

    // for debug draw
    private Points points;
    private Lines lines;
};


// constructor
function FFBIKGraph( Ref<Skeleton> skeleton ){
    //this.lines = Lines();
    this.skeleton = skeleton;
    this.points = Points();
    this.lines = Lines();
    this.controlledNodes.resize(0);
    this.root = -1;
}


function FFBIKGraph.finalize!(){
    this.distinctNodes();
    this.points.resize( this.getNodeCount() );
    this.lines.clear();
    //this.setRootNode( this.nodes[0][0] );
}

function FFBIKGraph.addEdge!( in String a, in String b ){
    Index ba = this.skeleton.findBone( a );
    Index bb = this.skeleton.findBone( b );
    FFBIKEdge edge = FFBIKEdge( ba, bb );
    this.nodes[ ba ].push( bb );
    this.nodes[ bb ].push( ba );
    this.edges.push( edge );
}

function FFBIKGraph.addNode( String boneName ){
    Index id = this.skeleton.findBone( boneName );
    this.nodes[ id ];
}

function FFBIKGraph.addNode!( String boneName, Boolean isControlled ){
    Index id = this.skeleton.findBone( boneName );
    this.nodes[ id ];
    this.markAsControlled( id );
}


////////////////////////////////////////////////////////////////////////////////////////
function FFBIKGraph.registerControllBone!( String boneName ){
    Index id = this.skeleton.findBone( boneName );
    this.controlledNodes.push(id);
}


function FFBIKGraph.markAsControlled!( in Index id ){
    this.controlledNodes.push(id);
}


function Boolean FFBIKGraph.isControlledNode( in Index id ){
    return isExistsIn( id, this.controlledNodes );
}


function FFBIKGraph.setRootNode!( in String boneName ){
    Index id = this.skeleton.findBone( boneName );
    this.setRootNode( id );
}


function FFBIKGraph.setRootNode!( in Index id ){
    if ( this.root != -1 ){
        setError( "this FFBIKGraph's root is already defined!!!  as "+ this. root );
        return;
    }
    this.root = id;
}


////////////////////////////////////////////////////////////////////////////////////////
function Index[] FFBIKGraph.searchNoisy( io Index id, io Index array[] ){
    Index results[];
    Index counter[] = this.nodes[ id ];
    for (Index i=0; i < counter.size; i++ ){
        Boolean hit = false;
        for (Index j=0; j < array.size; j++ ){
            if (counter[i] == array[j] ){
                hit = true;
            }
        }

        if ( !hit ){
            results.push( counter[i] );
        }
    }

    //distinct( results );
    return results;
}
/*
function FFBIKGraph.addNode( Bone bone ){
    this.nodes[ bone ];
}
*/


/*-------------------------------------------------------------------------------------*/
/// used for search temporary
object OneNode {
    Index   index;
    Boolean done;
    Integer cost;

    Index   to[];
};

function OneNode( Index id, Index to[] ){
    this.index = id;
    this.done  = false;
    this.cost  = -1; //Integer( BIGSCALAR_POSITIVE );  //TODO: is this good?
    this.to    = to;
}

function Integer FFBIKGraph.searchSmallerDistance?( Index end ){
    return this.searchSmallerDistance( this.root, end );
}

/// Dijkstra's Algorithm
function Integer FFBIKGraph.searchSmallerDistance( String start, String end ){
    return this.searchSmallerDistance(
                        this.skeleton.findBone( start ),
                        this.skeleton.findBone( end   )
                    );
}
function Integer FFBIKGraph.searchSmallerDistance( Index start, Index end ){

    // initialize set start node's cost 0, others -1;
    OneNode tmpNodes[Index];
    for ( k, v in this.nodes ){
        OneNode node = OneNode( k, this.nodes[k] );
        if ( k == start ){
            node.cost = 0;
        }
        tmpNodes[k] =  node;
    }

    //
    while( true ){
        OneNode doneNode = null;
        //for (Index i=0; i < tmpNodes.size; i++ ){
        for ( k, v in tmpNodes ){
            if( v.done == true || v.cost < 0 ){
                continue;
            }

            if( doneNode == null || v.cost < doneNode.cost ){
                doneNode = v;
            }
        }

        if( doneNode === null ){
            break;
        }

        // flag done
        doneNode.done = true;

        // update node info
        for (Index i=0; i < doneNode.to.size; i++ ){
            Index to   = doneNode.to[i];
            Index cost = doneNode.cost++;

            if ( tmpNodes[to].cost < 0 || cost < tmpNodes[to].cost ){
                tmpNodes[to].cost = cost;
            }
        }

        if ( doneNode.index == end ){
            return doneNode.cost;
        }

    }

    return -1;
}


/*-------------------------------------------------------------------------------------*/
function FFBIKGraph.distinctNodes!(){
    for( k,v in this.nodes){
        distinct( this.nodes[k] );
    }
}
function String FFBIKGraph.getName(){
    return "hello";
}

function String FFBIKGraph.getInlineEdgeName(){
    return this.getName() + ":InlineEdges";
}
function String FFBIKGraph.getInlineNodeName(){
    return this.getName() + ":InlineNodes";
}

function Size FFBIKGraph.getEdgeCount(){
    return this.edges.size;
}

function Size FFBIKGraph.getNodeCount(){
    Size s=0;
    for (k, v in this.nodes){
        s++;
    }
    return s;
}


function FFBIKEdge FFBIKGraph.getEdge( in Index index_a, in Index index_b){
    for ( Index i=0; i< this.getEdgeCount(); i++ ){

        // a,  b
        if ( ( this.edges[i].a == index_a )
            && ( this.edges[i].b == index_b )) {
            return this.edges[i];
        }

        // b,  a
        if ( ( this.edges[i].a == index_b )
            && ( this.edges[i].b == index_a )) {
            return this.edges[i];
        }
    }
    setError("edge not found: ["+ index_a +":"+ index_b +"]");
    return null;
}

function FFBIKEdge FFBIKGraph.getEdge( in String aName, in String bName ){
    for ( Index i=0; i< this.getEdgeCount(); i++ ){

        // a,  b
        if ( (this.skeleton.getBone( this.edges[i].a ).name == aName)
            && (this.skeleton.getBone( this.edges[i].b ).name == bName)) {
            return this.edges[i];
        }

        // b,  a
        if ( (this.skeleton.getBone( this.edges[i].a ).name == bName)
            && (this.skeleton.getBone( this.edges[i].b ).name == aName)) {
            return this.edges[i];
        }
    }
    setError("edge not found");
    return null;
}


/// for debugging
function FFBIKGraph.reportNodes(){
    for (k, v in this.nodes ){
        report( k + ":    "+ this.skeleton.getBone( k ).name );
    }
    //report( this.searchSmallerDistance( 18, 25 ) );
}

// Generates a set of inline shapes nested under the provided rootTransform. 
function FFBIKGraph.drawEdges!(in ISkeleton skeleton, io IPose pose, io DrawingHandle handle ) {
    GeometryAttributes attributes = this.lines.getAttributes();
    Vec3Attribute positions       = attributes.getOrCreateAttribute('positions', Vec3Attribute);
    Vec3Attribute normals         = attributes.getOrCreateAttribute('normals', Vec3Attribute);
    Vec3Attribute velocities      = attributes.getOrCreateAttribute('velocities', Vec3Attribute);
    ColorAttribute vertexColors   = attributes.getOrCreateAttribute('vertexColors', ColorAttribute);
    ScalarAttribute ratios        = attributes.getOrCreateAttribute('ratios', ScalarAttribute);
  
    InlineDrawing draw = handle.getDrawing();
    InlineShader shader = draw.registerShader(OGLLinesShader());
    InlineMaterial mat  = shader.getOrCreateMaterial('mat');
    InlineTransform edgeTransform = handle.getRootTransform().getChild( this.getInlineEdgeName() );

    if(edgeTransform == null){
        mat.setUniform('u_normalIsTangent',  0);
        mat.setUniform('u_shadingAmount', 0.5);
        mat.setUniform('u_vertexColorAmount', 0.5);
        mat.setUniform('u_rootColor', Color( 0, 255, 255));
        mat.setUniform('u_tipColor', Color( 0, 0, 0));

        edgeTransform = StaticInlineTransform( this.getInlineEdgeName(), Xfo() );
        handle.getRootTransform().addChild(edgeTransform);

        for(Integer i=0; i<this.getEdgeCount(); i++){

            this.lines.addLine(
                pose.getBoneXfo( this.edges[i].a ).tr,
                pose.getBoneXfo( this.edges[i].b ).tr
            );
        }

        InlineShape shape = draw.registerShape( InlineLinesShape('lines', this.lines) );
        InlineInstance instance = mat.addInstance(SimpleInlineInstance(this.getInlineEdgeName(), edgeTransform, shape));
    } else {
        for(Integer i=0; i< this.getEdgeCount(); i++){
            this.lines.setPosition( i*2,   pose.getBoneXfo( this.edges[i].a ).tr );
            this.lines.setPosition( i*2+1, pose.getBoneXfo( this.edges[i].b ).tr );
        }
    }

    this.lines.incrementVersion();
    positions.incrementVersion();

}


// Generates a set of inline shapes nested under the provided rootTransform. 
function FFBIKGraph.drawNodes!(in ISkeleton skeleton, io IPose pose, io DrawingHandle handle ){
    //Points points();
    GeometryAttributes attributes = this.points.getOrCreateSizesAttribute();
 
    InlineDrawing draw = handle.getDrawing();
    InlineShader shader = draw.registerShader(OGLFlatShader());
    InlineShader surfaceShader = draw.registerShader(OGLSurfaceShader());
    InlineMaterial mat  = shader.getOrCreateMaterial('mat');
    InlineMaterial pointsMaterial = shader.getOrCreateMaterial("points");
    pointsMaterial.setUniform('u_color', Color(1.0, 0.0, 0.0));

    InlineTransform transform = handle.getRootTransform().getChild(
                                                    this.getInlineNodeName() );

    if( transform == null){

        // initialize points
        this.points.clear();
        this.points.resize( this.getNodeCount() );
        transform = StaticInlineTransform( this.getInlineNodeName(), Xfo() );
        handle.getRootTransform().addChild( transform );
        InlineShape shape = draw.registerShape( InlinePointsShape( this.getInlineNodeName(), this.points));
        InlineInstance instance = mat.addInstance(InlineInstance( this.getInlineNodeName(), transform, shape, pointsMaterial));

        Index i=0;
        for( k,v in this.nodes ){
            this.points.addPoint( pose.getBoneXfo( k ).tr );
            i++;
        }
    } else {
        // update points
        Index i=0;
        for( k,v in this.nodes ){
            if ( i >= this.points.size ){
                setError( "hogeeeeeeeeeeeeeeeee" );
            } else {
                this.points.setPosition( i, pose.getBoneXfo( k ).tr );
            }
            i++;
        }
    }
    this.points.incrementPositionsVersion();

}


/*---------------------------------------------------------------------------------------
//
//         custom pose
//
---------------------------------------------------------------------------------------*/
object FFBIKPose : Pose {
};

function FFBIKPose( Skeleton skeleton ){
    this.skeleton = skeleton;
    this.version = mathRandomInteger(55540, UInt32(this.skeleton.getVersion()));
    this.reset();

}

function FFBIKPose.updateXfo!( Index id, Xfo xfo ){
    this.xfos[ id ] = xfo;
    this.valid[ id ] = true;
}

function FFBIKPose.test!(){
    //for (Index i=0; i< this.skeleton.bones.size; i++ ){
    //    this.updateXfo( i, Xfo( Vec3( 5, 0, 0) ));
    //}
    this.updateXfo( 0, Xfo( Vec3( 5, 0, 0) ));
}


