// Created by kl2dfg (processComposeFunction)
{
  "objectType" : "Func",
  "title" : "-> FABRIKResolver",
  "ports" : [
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "skeleton",
      "execPortType" : "In",
      "typeSpec" : "Skeleton"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "solvers",
      "execPortType" : "In",
      "typeSpec" : "IFABRIKSolver[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "graph",
      "execPortType" : "In",
      "typeSpec" : "Ref<FFBIKGraph>"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "solverDepths",
      "execPortType" : "In",
      "typeSpec" : "Size[]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "maxDepth",
      "execPortType" : "In",
      "typeSpec" : "Size"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "subBaseIndices",
      "execPortType" : "In",
      "typeSpec" : "Index[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
        },
      "nodePortType" : "Out",
      "name" : "subBaseXfos",
      "execPortType" : "In",
      "typeSpec" : "Xfo[Index][]"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "max_iteration",
      "execPortType" : "In",
      "typeSpec" : "Integer"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "Out",
      "name" : "effectorCounter",
      "execPortType" : "In",
      "typeSpec" : "Index"
      },
    {
      "objectType" : "Port",
      "nodePortType" : "In",
      "name" : "result",
      "execPortType" : "Out",
      "typeSpec" : "FABRIKResolver"
      }
    ],
  "extDeps" : {
    "FABRIK" : "*"
    },
  "presetGUID" : "7ED22044BC4FE71706824B5A4F573C00",
  "code" : "require FABRIK;

dfgEntry {
  result.skeleton = skeleton;
  result.solvers = solvers;
  result.graph = graph;
  result.solverDepths = solverDepths;
  result.maxDepth = maxDepth;
  result.subBaseIndices = subBaseIndices;
  result.subBaseXfos = subBaseXfos;
  result.max_iteration = max_iteration;
  result.effectorCounter = effectorCounter;
}
"
  }