/*

*/
require Math;
require Characters;
require FABRIK;



/*---------------------------------------------------------------------------------------
//
//
//
//
---------------------------------------------------------------------------------------*/
/// store solvers, resolve these solver by that weight recursive
/// \dfgPresetFolder Manager
struct FABRIKResolver {

    Boolean         drawDebug;

    Skeleton        skeleton;
    IFABRIKSolver   solvers[];
    Ref<FFBIKGraph> graph;

    Size            solverDepths[];
    Size            maxDepth;
    Index           subBaseIndices[];
    Xfo             subBaseXfos[Index][];

    Integer         max_iteration;

    Index           effectorCounter;
};


/// constructor
/// \dfgPresetFolder Manager
function FABRIKResolver( Ref<FFBIKGraph> graph ){
    this = FABRIKResolver( graph.getSkeleton(), graph );
}


/// constructor
/// \dfgPresetFolder Manager
function FABRIKResolver( Skeleton skeleton, Ref<FFBIKGraph> graph ){
    this.drawDebug = true;
    this.solvers.resize( 0 );
    this.solverDepths.resize( 0 );
    this.subBaseIndices.resize( 0 );
    this.subBaseXfos.clear();
    this.graph    = graph;
    this.maxDepth = 0;
    this.skeleton = skeleton;

    this.max_iteration = 10;
    this.effectorCounter = 0;
}

// dummy
/// \internal
function FABRIKResolver.ComposeFABRIKResolver(){}

/// \internal
function FABRIKResolver.DecomposeFABRIKResolver(){}


/// \dfgPresetFolder Manager
function FABRIKResolver.addSolver!( io IFABRIKSolver solver ){
    this.solvers.push( solver );
    this.subBaseIndices.push( solver.GetSubBaseIndex() );
    solver.SetEffectorIndex( this.effectorCounter );
    this.effectorCounter += solver.GetEffectorCount();
}


/// \internal
function Boolean FABRIKResolver.isReady(){
    if ( this.solvers.size() == 0 ){
        return false;
    }

    for (Index i=0; i < this.solvers.size(); i++ ){
        if ( this.solvers[i].IsReady() == false ){
            return false;
        }
    }

    return true;
}


/// \dfgPresetFolder Manager
function FABRIKResolver.setDrawDebug!( in Boolean flag ){
    this.drawDebug = flag;
}


/// \internal
/// \dfgPresetFolder Manager
function FABRIKResolver.finalize!(){
    IFABRIKSolver tmpSolvers[];
    for ( Index i=0; i < this.solvers.size(); i++ ){
        if ( !this.solvers[i].IsReady() ){
            tmpSolvers.push( this.solvers[i] );
        }
    }
    distinct( this.subBaseIndices );

    for ( Index i=0; i < this.subBaseIndices.size(); i++ ){
        this.subBaseXfos[ this.subBaseIndices[i] ].resize(0);
    }
    this.calculateSolverDepth();

    finalizePEX<<<tmpSolvers.size()>>>( tmpSolvers );
}


/// \dfgPresetFolder Manager
/// \internal
function FABRIKResolver.calculateSolverDepth!(){
    this.solverDepths.resize( this.solvers.size() );
    for (Index i=0; i < this.solvers.size(); i++ ){
        Size d = 0;

        //*
        if ( this.solvers[i].type() == FABRIKCloseLoopSolver ){
            d = 0;
        } else {
            d = 10;
        }
        /*/
        Integer cost = this.graph.searchSmallerDistance( this.solvers[i].GetSubBaseIndex() );
        cost += this.graph.searchSmallerDistance( this.solvers[i].GetRootNodeIndex() );
        d = cost;

        if ( cost < 0 ){
            d = 0;
        }
        // */

        if ( d > this.maxDepth ){
            this.maxDepth = d;
        }

        this.solverDepths[i] = d;
    }
}


/// \dfgPresetFolder Manager
function FABRIKResolver.solve!( io IPose pose, Mat44 effectors[] ){
    // 
    if ( !this.isReady() ){
        this.finalize();
    }

    Integer iteration_count = 0;
    while ( (iteration_count < this.max_iteration) ){

        // gather from most far solver
        for ( Size d=this.maxDepth; d >= 0 && d <= this.maxDepth; d--){

            IFABRIKSolver tmpSolvers[];
            SubBaseInfo   tmpSubBaseInfos[];

            for ( Index i=0; i < this.solvers.size(); i++ ){
                if ( d == this.solverDepths[i] ){
                    tmpSolvers.push( this.solvers[i] );
                }
            }
            if ( tmpSolvers.size() == 0 ){ continue; }

            tmpSubBaseInfos.resize( tmpSolvers.size() );

            solvePEX<<<tmpSolvers.size()>>>( pose, tmpSolvers, effectors, tmpSubBaseInfos );

            // gather sub-base xfos
            for ( Index i=0; i < tmpSubBaseInfos.size(); i++ ){
                this.subBaseXfos[ tmpSubBaseInfos[i].index ].resize(i+1);
                this.subBaseXfos[ tmpSubBaseInfos[i].index ][i] = tmpSubBaseInfos[i].xfo;
            }

            this.calcCeteroid( pose );
            updatePosePEX<<<tmpSolvers.size()>>>( pose, tmpSolvers );

            if (d == 0){ break; }
        }

        for ( Size d=0; d <= this.maxDepth; d++){
            IFABRIKSolver tmpSolvers[];

            for ( Index i=0; i < this.solvers.size(); i++ ){
                if ( d == this.solverDepths[i] ){
                    tmpSolvers.push( this.solvers[i] );
                }
            }

            offestByCentroidPEX<<<tmpSolvers.size()>>>( pose, tmpSolvers, this.subBaseXfos );
            updatePosePEX<<<tmpSolvers.size()>>>( pose, tmpSolvers );
            if (d == this.maxDepth){ break; }
        }

        iteration_count++;
    }

    if ( this.drawDebug ){
        drawSolverPEX<<< this.solvers.size() >>>( this.solvers );
    }
}

/// \internal
/// \dfgPresetFolder Manager
function FABRIKResolver.calcCeteroid!( io IPose pose ){
    calcCenteroidPEX<<<this.subBaseIndices.size()>>>( pose, this.subBaseIndices, this.subBaseXfos );
    for (Index i=0; i < this.subBaseIndices.size(); i++ ){
        pose.setBoneXfo( this.subBaseIndices[i], this.subBaseXfos[this.subBaseIndices[i]][0] );
    }
}

    
operator calcCenteroidPEX<<<index>>>( io IPose pose, in Index subBaseIndices[], io Xfo[Index] subBaseXfos[] ){
    Index k = subBaseIndices[index];
    Vec3 sum = Vec3();
    for (Index i=0; i < subBaseXfos[k].size(); i++ ){
        sum += subBaseXfos[k][i].tr;
    }
    sum = ( sum + pose.getBoneXfo( k ).tr ) / ( subBaseXfos[k].size() + 1 );
    subBaseXfos[k].resize( 1 );
    subBaseXfos[k][0].tr = sum;    // store result on first
}


////////////////////////////////////////////////////////////////////////////////////////
operator finalizePEX<<<index>>>( io IFABRIKSolver solvers[] ){
    solvers[index].Finalize();
}

operator solvePEX<<<index>>>(
                            io IPose pose,
                            io IFABRIKSolver solvers[],
                            in Mat44 effectors[],
                            io SubBaseInfo subBaseInfos[]
                        ){

    //solvers[index].Solve( pose, effectors[index].translation() );
    solvers[index].Solve( pose, effectors );
    subBaseInfos[index].index = solvers[index].GetSubBaseIndex();
    subBaseInfos[index].xfo   = solvers[index].GetSubBaseXfo();
}

operator offestByCentroidPEX<<<index>>>(
                            io IPose pose,
                            io IFABRIKSolver solvers[],
                            io Xfo[Index][] centeroidXfo
                        ){

    solvers[index].OffsetByCentroid( pose, centeroidXfo[solvers[index].GetSubBaseIndex()][0] );
}

operator updatePosePEX<<<index>>>(
                            io IPose pose,
                            io IFABRIKSolver solvers[]){
    solvers[index].UpdatePose( pose );
}

operator drawSolverPEX<<<index>>>(
                            io IFABRIKSolver solvers[]){
    solvers[index].DrawSolver();
}


/// \internal
struct SubBaseInfo{
    Index index;
    Xfo   xfo;
};
