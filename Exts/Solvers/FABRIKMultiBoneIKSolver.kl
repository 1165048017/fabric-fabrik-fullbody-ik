/**
    Implementation of the FABRIK IK Algorithm
    Please see http://andreasaristidou.com/publications/FABRIK.pdf for more details

Inverse Kinematics is defined as the problem of determining a set of appropriate joint
configurations for which the end effectors move to desired positions as smoothly, rapidly, and
as accurately as possible. However, many of the currently available methods suffer from high
computational cost and production of unrealistic poses. In this work, a novel heuristic method,
called Forward And Backward Reaching Inverse Kinematics (FABRIK), is described and compared with
some of the most popular existing methods regarding reliability, computational cost and
conversion criteria. FABRIK avoids the use of rotational angles or matrices, and instead finds
each joint position via locating a point on a line. Thus, it converges in fewer iterations,
has low computational cost and produces visually realistic poses.
Constraints can easily be incorporated within FABRIK and multiple links with
multiple end effectors are also easily supported.

http://www.andreasaristidou.com/FABRIK.html
Dr Andreas Aristidou

*/

require Math;
require Characters;
require FABRIK;
require InlineDrawing;



/// \dfgPresetFolder Solver
object FABRIKSolver : IFABRIKSolver {
    String        name;
    Boolean       ready;
    Skeleton      skeleton;        // sleketon
    DrawingHandle handle;

    Bone          bones[];         // the bones
    Xfo           xfos[];          // the xfo of bone
    Index         nodeIndices[];   // the bone index on the skeleton
    Index         subBaseIndex;    // the index sub-base bone on skeleton
    Index         subBaseIndexInternal;  // internally use

    Integer       num_bones;       // number of bone count
    Scalar        chain_length;    // length for root to end(tip) at full extension
    Scalar        precision;       // precision
    Integer       max_iteration;   // max iteration
    Scalar        chain_length_from_subbase;    // length for sub-base to end(tip) at full extension

    Boolean       fullExtension;
    Vec3          effectorPosition;
    Index         effectorIndex;
    Index         upvectorIndex;
    Index         effectorCount; // = 2; // ik effector + upvector

};


/// \dfgPresetFolder Solver
function FABRIKSolver( Ref<Skeleton> skeleton, io DrawingHandle handle, in String boneNames[] ){

    this.ready = false;
    this.skeleton = skeleton;
    this.handle = handle;
    this.precision = 0.005f;
    this.max_iteration = 150;
    this.effectorCount = 2;

    this.num_bones = boneNames.size();
    this.bones.resize( this.num_bones );
    this.xfos.resize( this.num_bones );
    this.nodeIndices.resize( this.num_bones );
    this.name = this.type() +":" + this.skeleton.name +":" + boneNames[boneNames.size()-1];

    ////////////////////////////////////////////////////////////////////////////////////
    Xfo xfos[];
    Index indices[];
    for ( Index i=0; i < this.num_bones; i++) {
        Index boneindex = skeleton.findBone( boneNames[i] );
        this.nodeIndices[ i ] = boneindex;
        Bone bone = skeleton.getBone( boneindex );
        this.xfos[i] = bone.referencePose;
        bone.parentIndex = i-1;
        bone.length = 0.0f;  // must culculate later
        //bone.radius = 1.0f;
        bone.name = "FABRIKSolver:bones-" + skeleton.getBone( boneindex ).name;
        report( "add bone["+i+"]: " + bone.name );

        this.bones[i] = bone;
    }

    // calculate bone length and total chain length
    this.chain_length = 0.0f;
    for (Index i=0; i < this.num_bones - 1; i++) {

        Xfo tmp_parent = this.bones[i].referencePose;

        Scalar length = abs( ( this.xfos[i+1].tr - this.xfos[i].tr).length() );
        if ( isZero( length )) {
            setError( "zero length bone found" );
        }

        report( "bone length ["+i+"]: " + length);
        this.bones[i].length = length;
        this.chain_length += length;

        //report( "length["+i+"]: "+length);
    }
    report( this.name + " total chain_length is :" + this.chain_length );

}


/// \internal
function FABRIKSolver.SetEffectorIndex!( io Index id ){
    this.effectorIndex = id;
    this.upvectorIndex = id+1;
}

/// \internal
function Index FABRIKSolver.GetEffectorCount(){
    return this.effectorCount;
}

////////////////////////////////////////////////////////////////////////////////////////
/// implement interface IFABRIKSolver
/// \dfgPresetFolder Solver
function FABRIKSolver.Solve!( io IPose pose, in Mat44 effectors[] ){
    this.effectorPosition = effectors[this.effectorIndex].translation();
    this.ResetToReferencePose();
    this.alignByUpvector( pose, effectors[this.upvectorIndex].translation() );
    this.EvaluateBoneTransforms( pose, this.effectorPosition, 0 );
}
/// \dfgPresetFolder Solver
function FABRIKSolver.Solve!( io IPose pose, in Vec3 effector_position ){
    this.effectorPosition = effector_position;
    this.ResetToReferencePose();
    this.alignByUpvector( pose, Vec3( 4, 16, -10 ) );
    this.EvaluateBoneTransforms( pose, effector_position, 0 );
    //drawXfoArray( this.handle.getRootTransform(), "debug-presolve"+this.name, this.xfos );
}


/// \internal
function FABRIKSolver.alignByUpvector!( io IPose pose, in Vec3 upvPosition ){
    Xfo subBasePosition = this.xfos[ this.subBaseIndexInternal ].tr;

    Xfo subbaseSpaceXfos[];
    for( Index i=this.subBaseIndexInternal+1; i < this.num_bones; i++ ){
        this.xfos[i].tr = upvPosition;
    }

    return;
}


/// \internal
function FABRIKSolver.UpdatePose?( io IPose pose ){
    for ( Index i=this.subBaseIndexInternal; i < this.nodeIndices.size(); i++ ){
        pose.setBoneXfo( this.nodeIndices[i], this.xfos[i] );
    }
}



/// \internal
function FABRIKSolver.SetSubBase!( in String nodeName ){
    this.subBaseIndex = this.skeleton.findBone( nodeName );

    Scalar length = 0.0;
    this.chain_length_from_subbase = 0.0;

    // search index in this.xfos
    Boolean hit = false;
    for( Index i=0; i < this.nodeIndices.size(); i++ ){

        if( !hit && this.subBaseIndex == this.nodeIndices[i] ){
            this.subBaseIndexInternal = i;
            hit = true;
        }

        // calculate chain length
        if (hit){
            length = this.bones[i].length;
            this.chain_length_from_subbase += length;
        }
    }

    if( !hit ){
        setError( "no node found for setting sub-base: " + nodeName );
    }
}

/// \internal
function Index FABRIKSolver.GetRootNodeIndex(){
    return this.nodeIndices[0];
}

/// \internal
function Index FABRIKSolver.GetSubBaseIndex(){
    return this.subBaseIndex;
}

/// \internal
function Xfo FABRIKSolver.GetSubBaseXfo(){
    return this.xfos[ this.subBaseIndexInternal ];
}

/// \internal
function FABRIKSolver.OffsetByCentroid!( io IPose pose, Xfo xfo ){
    this.xfos[this.subBaseIndexInternal].tr = pose.getBoneXfo( this.subBaseIndex ).tr;
    this.EvaluateBoneTransforms( pose, this.effectorPosition, this.subBaseIndexInternal );
    //drawXfoArray( this.handle.getRootTransform(), "debug-postsolve"+this.name, this.xfos );
}

////////////////////////////////////////////////////////////////////////////////////////
///
/// \param pose,              The pose stroe bone xfos
/// \param effector_position, The position to reach
/// \param startIndex,        Bone index, start evaluation range
/// \internal
function FABRIKSolver.EvaluateBoneTransforms!( io IPose pose, in Vec3 effector_position, in Index startIndex ){

    Xfo rootXfo = this.xfos[startIndex];
    Boolean is_bone_location_updated = false;
    Scalar root_to_target_distance = abs(
        ( rootXfo.tr - effector_position ).length()
    );

    if (( startIndex == 0 && root_to_target_distance*0.95 > this.chain_length ) 
         || ( startIndex != 0 && root_to_target_distance*0.95 > this.chain_length_from_subbase )) {

        this.fullExtension = true;
        for (Integer link_id = (startIndex+1); link_id < this.num_bones; link_id++) {
            Bone parent = this.bones[ link_id - 1 ];
            Xfo  parentXfo = this.xfos[ link_id - 1 ];
            Vec3 diff = effector_position - parentXfo.tr;
            this.xfos[ link_id ].tr = parentXfo.tr + diff.normalize() * parent.length;

        }
        is_bone_location_updated = true;

    } else {
        this.fullExtension = false;
        this.SolvePosition( startIndex, effector_position );
        is_bone_location_updated = true;
    }

    if (is_bone_location_updated) {

        Boolean is_rot_changed = this.SolveRotation( pose, effector_position );
        for (Index i=startIndex; i < this.num_bones; i++) {
            Xfo tmp = pose.getBoneXfo( this.nodeIndices[i] );
            tmp.tr = this.xfos[i].tr;

            if (is_rot_changed) {
                tmp.ori = this.xfos[i].ori;
            }
        }

    }
}

/// \internal
function FABRIKSolver.reportBoneLength( in String mes ){
    Scalar total = 0.0;
    for (Index i=0; i < this.num_bones - 1; i++) {
        Scalar length = abs( ( this.xfos[i+1].tr - this.xfos[i].tr).length() );
        report( mes +" bone length ["+i+"]: " + length +"    "+ this.xfos[i].tr );
        total += length;
    }
    report( mes+" bone length total: " + total +"    "+ this.xfos[this.xfos.size()-1].tr);
}


/// \internal
function FABRIKSolver.ResetToReferencePose!() {
    for ( Index i=0; i < this.num_bones; i++ ){
        this.xfos[i] = this.bones[i].referencePose;
    }
}

/// if effector is within reach, calculate bone translations to position tip
/// at  effector location.
/// \internal
function FABRIKSolver.SolvePosition!( Index startIndex, in Vec3 effector_position ) {

    Index tip_bone_index = this.num_bones - 1;
    Bone tip = this.bones[tip_bone_index];
    Xfo tipXfo = this.xfos[tip_bone_index];
    Scalar slop = 10000; //abs( (tipXfo.tr - effector_position).length ) - tip.length;

    Integer iteration_count = 0;
    while ( (slop > this.precision  ) && (iteration_count < this.max_iteration) ){
        // "Forward Reaching" stage - adjust bones from End effector to Root
        this.ForwardReachOnTail( effector_position );
        for (Index link_id = tip_bone_index - 1; link_id > startIndex; link_id--) {
            this.ForwardReach( link_id, link_id+1 );
        }

        // "Backward Reaching" stage - adjust bones from root.
        for (Index link_id = startIndex+1; link_id < this.num_bones; link_id++ ){
            this.BackwardReach( link_id, link_id-1 );
        }
        this.BackwardReachOnTail( effector_position );

        slop = abs(
            this.bones[ tip_bone_index ].length
            - distance( this.xfos[tip_bone_index].tr, effector_position)
        );
        iteration_count++;
    }

}

/// check total length between each xfos and default length
/// \internal
function Boolean FABRIKSolver.isChainLengthInSafe(){
    Scalar total = 0.0;
    for (Index i=0; i < this.num_bones - 1; i++) {
        Scalar length = abs( ( this.xfos[i+1].tr - this.xfos[i].tr).length() );
        total += length;
    }
    return abs( total - this.chain_length ) < this.precision*10;
}


/// re-orientation of bone local axes after translation calculation
/// \internal
function Boolean FABRIKSolver.SolveRotation!( io IPose pose, in Vec3 effector_position ) {
    solveRotationPEX<<<this.num_bones>>>( this.xfos, this.nodeIndices, this.num_bones, effector_position);

    //TODO:
    Boolean is_changed = true;
    return is_changed;
}




/// \internal
function FABRIKSolver.ForwardReach!( in Integer target_index, in Integer child_index ){
    if ( target_index > this.num_bones -1 || child_index > this.num_bones -1 ){
        setError( "index > bone count ---- target:" + target_index + "  limit: " + child_index + "bone count: " + this.num_bones);
    }

    this.xfos[ target_index ].tr = SolveJoint(
            this.xfos[ target_index ],
            this.xfos[ child_index ],
            this.bones[ target_index ].length
    );
}


/// adjust bones from root
/// \internal
function FABRIKSolver.BackwardReach!( in Integer target_index, in Integer parent_index ){
    if ( target_index > this.num_bones -1 || parent_index > this.num_bones -1 ){
        setError( "index > bone count ---- target:" + target_index + "  limit: " + parent_index + "bone count: " + this.num_bones);
    }
    this.xfos[ target_index ].tr = SolveJoint(
            this.xfos[ target_index ],
            this.xfos[ parent_index ],
            this.bones[ target_index -1 ].length
    );
}

/// \internal
function FABRIKSolver.ForwardReachOnTail!( in Vec3 effector_position ){
    this.xfos[ this.num_bones -1 ].tr = SolveJoint(
            this.xfos[ this.num_bones -1 ].tr,
            effector_position,
            this.bones[ this.num_bones -1 ].length
    );
}

/// \internal
function FABRIKSolver.BackwardReachOnTail!( in Vec3 effector_position ){
    this.xfos[ this.num_bones - 1 ].tr = SolveJoint(
            this.xfos[ this.num_bones - 1 ].tr,
            this.xfos[ this.num_bones - 1 -1 ].tr,
            this.bones[ this.num_bones - 1 -1 ].length
    );
}

/// \dfgPresetFolder Solver
function String FABRIKSolver.GetName() {
    return this.name;
}

/// \dfgPresetFolder Solver
function Boolean FABRIKSolver.IsReady(){
    return this.ready;
}

/// \dfgPresetFolder Solver
function FABRIKSolver.Finalize!(){
    this.ready = true;
}


operator solveRotationPEX<<<index>>>(
                                //io IPose pose,
                                io Xfo xfos[],
                                in Index   nodeIndices[],
                                in Integer max,
                                in Vec3 effectorPosition
                            ){

        Boolean is_changed = false;
        Vec3 tail_pos;
        Vec3 new_dir;

        // xfos[index+1].tr is already processed, thus access safe in pex
        if ( index == max-1){
            // if tail bone treat previous bone's rotate as this rotate
            //tail_pos = effectorPosition;
            tail_pos = xfos[ index ].tr;
            new_dir = tail_pos - xfos[ index-1 ].tr;
        } else {
            tail_pos = xfos[ index+1 ].tr;
            new_dir = tail_pos - xfos[ index ].tr;
        }

        /*
        Vec3 old_dir = tail_pos - pose.getBoneXfo( nodeIndices[ index ]).tr;
        if ( !IsValidToEvaluate( old_dir ) || !IsValidToEvaluate( new_dir ) ){
            // TODO: effector on bone, same position
            //xfos[index].ori = xfos[index].ori;
            is_changed = false;
            return;
        } else {
            is_changed = true;
        }
        */

        // x axis point its tip
        new_dir.setUnit();
        Quat rot = Quat( Euler( 0, -HALF_PI, 0 , RotationOrder( 'xyz' )) );
        xfos[index].ori.setFromDirectionAndUpvector( new_dir, Vec3(0, 0, 1) );
        xfos[index].ori *= rot;
}




/// \dfgPresetFolder DebugDraw
function FABRIKSolver.DrawSolver!() {
    this.drawBones( this.xfos, this.bones, this.handle );
}
/// \internal
function FABRIKSolver.drawBones!( Xfo xfos[], Bone links[], io DrawingHandle handle) {
    InlineDrawing draw = handle.getDrawing();
    InlineShader shader = draw.registerShader(OGLSurfaceShader('surface'));
    InlineMaterial phong = shader.getOrCreateMaterial("phong");

    for(Integer i=0; i<links.size(); i++){
        InlineTransform boneTransform = handle.getRootTransform().getChild(
                                    this.GetName() +":" +i +":"+ links[i].name);
        if(boneTransform == null){
            Bone bone = links[i];
            boneTransform = StaticInlineTransform(
                            this.GetName() +":" +i +":"+bone.name, xfos[i] );
            handle.getRootTransform().addChild(boneTransform);

            InlineShape boneShape = constructBoneShape(i, links);
            GeometryAttributes attributes = boneShape.getAttributes();
            Vec3Attribute  normals = attributes.getOrCreateAttribute('normals', Vec3Attribute);
            InlineInstance boneInstance = SimpleInlineInstance( bone.name + 'Instance', boneTransform, boneShape, phong);
            boneInstance.setInstanceUniform(InlineUniform('u_diffuseColor', bone.color));
        }
        else{
            boneTransform.setLocalXfo(0, xfos[i]);
        }
    }
}
