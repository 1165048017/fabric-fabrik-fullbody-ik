/**

*/
require FABRIK;



/// \dfgPresetFolder Solver
interface IFABRIKSolver {

    /// resolve bone
    /// \dfgPresetFolder Solver
    Solve!( io IPose pose, in Vec3 effector_position );
    /// \dfgPresetFolder Solver
    Solve!( io IPose pose, in Mat44 effectors[] );

    /// \internal
    SetEffectorIndex!( io Index id );
    /// \internal
    Index GetEffectorCount();

    /// update the pose
    /// \internal
    UpdatePose?( io IPose pose );

    //EvaluateBoneTransforms!( io IPose pose, in Vec3 effector_position );

    /// reset to reference pose, bones controled by this solver
    /// \dfgPresetFolder Solver
    ResetToReferencePose!();

    /// debug draw
    /// \dfgPresetFolder DebugDraw
    DrawSolver!();

    /// \internal
    String GetName();

    /// \internal
    Boolean IsReady();
    /// \internal
    Finalize!();

    /// \internal
    SetSubBase!( in String nodeName );
    /// \internal
    Index GetSubBaseIndex();
    /// \internal
    Index GetRootNodeIndex();
    /// \internal
    Xfo GetSubBaseXfo();

    /// \internal
    OffsetByCentroid!( io IPose pose, Xfo xfo );
};


/// \internal
inline Boolean IsValidToEvaluate( in Vec3 v ){
    if ( v.length() == 0.0 || v.length().isNaN() ){
        return false;
    }
    return true;
}

/// \internal
/// \dfgPresetFolder Solver
inline Vec3 SolveJoint( in Xfo a, in Xfo b, Scalar length ){
    return SolveJoint( a.tr, b.tr, length );
}

/// \internal
/// \dfgPresetFolder Solver
inline Vec3 SolveJoint( in Mat44 a, in Mat44 b, Scalar length ){
    return SolveJoint( a.translation(), b.translation(), length );
}

/// \internal
/// \dfgPresetFolder Solver
inline Vec3 SolveJoint( in Vec3 a, in Vec3 b, Scalar length ){
    Vec3 diff = a - b;
    if ( diff.length() == 0 ) {
        return b;
    } else {
        return b + diff.normalize() * length;
    }
}

/// \internal
/// \dfgPresetFolder Solver
inline Scalar distance( in Vec3 a, in Vec3 b ){
    Vec3 diff;
    diff = a - b;
    return abs( diff.length() );
}
