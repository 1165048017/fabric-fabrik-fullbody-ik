/*

*/
require Math;
require Characters;



/*---------------------------------------------------------------------------------------
//
//         extension for built-in function
//
---------------------------------------------------------------------------------------*/
/// \dfgPresetFolder Util
function Bone Skeleton.getBone( in String name ){
    Index i = this.findBone( name );
    return this.getBone( i );
}

/// \dfgPresetFolder Util
function Skeleton.addBone!( in String name, in String parentName, Xfo xfo ){
    Scalar length = 0.0;
    this.addBone( name, parentName, xfo, length );
}

/// \dfgPresetFolder Util
function Skeleton.addBone!( in String name, in String parentName, Xfo xfo, in Scalar length ){
    Bone bone = this.boneGenerator( name, parentName, xfo, length );
    this.addBone( bone );
}

/// \dfgPresetFolder Util
function Bone Skeleton.boneGenerator( in String name, in String parentName, Xfo xfo, Scalar length ){
    Bone bone;

    bone.name = name;
    bone.parentIndex = -1;
    Index parentIndex = this.findBone( parentName );

    Xfo parentXfo();
    if ( parentIndex < 0 ){
        bone.parentIndex = -1;
        parentXfo = this.bones[ parentIndex ].referencePose;
    } else {
        bone.parentIndex = parentIndex;
    }

    bone.referencePose = xfo;
    bone.length = length;
    bone.radius = 0.1;
    bone.setFlag(BONEFLAG_DEFORMER);

    return bone;
}


/*---------------------------------------------------------------------------------------
//
//         utility
//
---------------------------------------------------------------------------------------*/
// FIXME: O(n^2) need more efficient algorithm 
/// \dfgPresetFolder Util
function distinct(io Bone array[]) {
    distinct( array, array.size() );
}
/// \dfgPresetFolder Util
function distinct(io Bone array[], Size length) {
    Index i, j;
    Index newLength = 1;  // new length of modified array

    for( i=1; i< length; i++ ){

        for( j=0; j< newLength ; j++){
            if(array[i] == array[j])
                break;
        }

        /* if none of the values in index[0..j] of array is not same as array[i],
           then copy the current value to corresponding new position in array */
        if( j == newLength ){
            array[newLength++] = array[i];
        }
    }
    array.resize( newLength );
}

/// \dfgPresetFolder Util
function UInt32 Bone.hash(){
    return this.name.hash() ^ this.parentIndex.hash();
}


function Boolean ==(Bone lhs, Bone rhs) {
    if ( lhs.name        != rhs.name )      { return false; }
    if ( lhs.parentIndex != rhs.parentIndex){ return false; }
    //if ( lhs.length      != rhs.length )    { return false; }
    //if ( lhs.radius      != rhs.radius)     { return false; }
    return true;
}
/*---------------------------------------------------------------------------------------
*/
/// \dfgPresetFolder Util
function distinct(io Index array[]) {
    distinct( array, array.size() );
}
/// \dfgPresetFolder Util
function distinct(io Index array[], Size length) {
    Index i, j;
    Index newLength = 1;  // new length of modified array

    for( i=1; i< length; i++ ){

        for( j=0; j< newLength ; j++){
            if(array[i] == array[j])
                break;
        }

        /* if none of the values in index[0..j] of array is not same as array[i],
           then copy the current value to corresponding new position in array */
        if( j == newLength ){
            array[newLength++] = array[i];
        }
    }
    array.resize( newLength );
}

/*---------------------------------------------------------------------------------------
*/
/// \dfgPresetFolder Util
inline function Boolean isExistsIn( in Index id, in Index array[] ){
    for (Index i=0; i < array.size(); i++ ){
        if (id == array[i] ){
            return true;
        }
    }
    return false;
}
